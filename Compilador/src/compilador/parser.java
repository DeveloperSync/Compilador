package compilador;
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 30 14:37:24 CDT 2017
//----------------------------------------------------

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Tue May 30 14:37:24 CDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}
  
  public void addFile(FileInputStream fileInputStream) throws Exception{
      InputStream is= fileInputStream;
      InputStreamReader r = new InputStreamReader(is);
      BufferedReader br = new BufferedReader(r);
      Yylex yylex = new Yylex(br);
      new parser(yylex).parse();
  }


  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\005\005\000\002\007\003\000\002\007\004" +
    "\000\002\006\007\000\002\006\007\000\002\006\007\000" +
    "\002\006\007\000\002\010\006\000\002\011\003\000\002" +
    "\011\004\000\002\012\005\000\002\013\003\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\005\000\002\021\007\000\002" +
    "\022\007\000\002\023\003\000\002\023\004\000\002\024" +
    "\004\000\002\025\003\000\002\025\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\023\006\001\002\000\004\002\121\001" +
    "\002\000\004\002\001\001\002\000\004\004\007\001\002" +
    "\000\004\015\010\001\002\000\012\024\017\025\013\026" +
    "\015\027\016\001\002\000\004\002\uffff\001\002\000\014" +
    "\016\ufffd\024\017\025\013\026\015\027\016\001\002\000" +
    "\004\004\114\001\002\000\004\016\113\001\002\000\004" +
    "\004\107\001\002\000\004\004\103\001\002\000\004\004" +
    "\020\001\002\000\004\013\021\001\002\000\004\014\022" +
    "\001\002\000\004\015\024\001\002\000\014\016\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\001\002\000\010\024\034" +
    "\026\033\030\026\001\002\000\004\004\ufff2\001\002\000" +
    "\004\004\uffef\001\002\000\016\004\055\013\056\024\034" +
    "\026\033\030\026\031\060\001\002\000\016\004\ufff6\013" +
    "\ufff6\024\ufff6\026\ufff6\030\ufff6\031\ufff6\001\002\000\004" +
    "\004\036\001\002\000\004\004\ufff3\001\002\000\004\004" +
    "\ufff0\001\002\000\004\004\ufff1\001\002\000\004\020\uffeb" +
    "\001\002\000\004\011\044\001\002\000\004\020\043\001" +
    "\002\000\004\020\uffec\001\002\000\004\020\uffed\001\002" +
    "\000\004\020\uffee\001\002\000\016\004\ufff4\013\ufff4\024" +
    "\ufff4\026\ufff4\030\ufff4\031\ufff4\001\002\000\006\017\046" +
    "\031\045\001\002\000\006\012\051\020\uffea\001\002\000" +
    "\004\004\047\001\002\000\004\017\050\001\002\000\004" +
    "\020\uffe8\001\002\000\004\031\052\001\002\000\004\020" +
    "\uffe9\001\002\000\004\020\102\001\002\000\012\004\055" +
    "\013\056\016\100\031\060\001\002\000\016\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\014\uffe1\020\uffe1\001\002\000\010" +
    "\004\055\013\056\031\060\001\002\000\016\004\ufff5\013" +
    "\ufff5\024\ufff5\026\ufff5\030\ufff5\031\ufff5\001\002\000\020" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\074\014\uffe2\020" +
    "\uffe2\001\002\000\014\005\064\006\065\007\067\010\066" +
    "\020\uffe4\001\002\000\004\020\uffe3\001\002\000\012\004" +
    "\uffe7\013\uffe7\016\uffe7\031\uffe7\001\002\000\010\004\055" +
    "\013\056\031\060\001\002\000\010\004\055\013\056\031" +
    "\060\001\002\000\010\004\055\013\056\031\060\001\002" +
    "\000\010\004\055\013\056\031\060\001\002\000\016\005" +
    "\uffdd\006\uffdd\007\uffdd\010\066\014\uffdd\020\uffdd\001\002" +
    "\000\016\005\uffdc\006\uffdc\007\uffdc\010\uffdc\014\uffdc\020" +
    "\uffdc\001\002\000\016\005\uffde\006\uffde\007\067\010\066" +
    "\014\uffde\020\uffde\001\002\000\016\005\uffdf\006\065\007" +
    "\067\010\066\014\uffdf\020\uffdf\001\002\000\004\031\075" +
    "\001\002\000\016\005\uffe0\006\uffe0\007\uffe0\010\uffe0\014" +
    "\uffe0\020\uffe0\001\002\000\014\005\064\006\065\007\067" +
    "\010\066\014\077\001\002\000\016\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\014\uffdb\020\uffdb\001\002\000\014\016\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\001\002\000\012\004" +
    "\uffe6\013\uffe6\016\uffe6\031\uffe6\001\002\000\012\004\uffe5" +
    "\013\uffe5\016\uffe5\031\uffe5\001\002\000\004\013\104\001" +
    "\002\000\004\014\105\001\002\000\004\015\024\001\002" +
    "\000\014\016\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\001" +
    "\002\000\004\013\110\001\002\000\004\014\111\001\002" +
    "\000\004\015\024\001\002\000\014\016\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\001\002\000\004\002\ufffe\001\002" +
    "\000\004\013\115\001\002\000\004\014\116\001\002\000" +
    "\004\015\024\001\002\000\014\016\ufff9\024\ufff9\025\ufff9" +
    "\026\ufff9\027\ufff9\001\002\000\004\016\ufffc\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\010" +
    "\001\001\000\006\006\011\007\013\001\001\000\002\001" +
    "\001\000\006\006\011\007\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\022\001\001\000\002\001\001\000\014\011\026\012" +
    "\027\013\030\014\031\015\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\056\013\030\014\031\015" +
    "\024\023\053\024\062\025\052\026\061\027\060\001\001" +
    "\000\002\001\001\000\014\016\036\017\041\020\037\021" +
    "\034\022\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\024\100\025\052\026\061\027\060\001\001\000\002" +
    "\001\001\000\004\027\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\072\001\001\000\004\027\071\001" +
    "\001\000\004\027\070\001\001\000\004\027\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= ABREPAR expresion CIERRAPAR 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion DIV expresion 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion POR expresion 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion MENOS expresion 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion MAS expresion 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= NUMERO PUNTO NUMERO 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= STRING 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= NUMERO 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*expresion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // argumento ::= if_else 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*argumento*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argumento ::= expresion 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*argumento*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argumentos ::= argumento FINLINEA 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*argumentos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque_argumentos ::= bloque_argumentos argumentos 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*bloque_argumentos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_argumentos ::= argumentos 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*bloque_argumentos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_texto ::= STRING IGUAL TEXTDEC STRING TEXTDEC 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("VarText: " + a); System.out.println(" := "); System.out.println("Valor: #" + b+"#"); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*declaracion_texto*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_flotante ::= STRING IGUAL NUMERO PUNTO NUMERO 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println("VarFloat: " + a); System.out.println(" := "); System.out.println("Valor: " + b + "." + c); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*declaracion_flotante*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_entero ::= STRING IGUAL NUMERO 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println("VarEnt: " + a); System.out.println(" := "); System.out.println("Valor: " + b); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*declaracion_entero*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_numero ::= declaracion_flotante 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*declaracion_numero*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_numero ::= declaracion_entero 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*declaracion_numero*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarador_variable ::= declaracion_texto 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*declarador_variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarador_variable ::= declaracion_numero 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*declarador_variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // texto ::= TEXTO 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println("Tipo: " + a); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*texto*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_numerico ::= FLOTANTE 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println("Tipo: " + a); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*tipo_numerico*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_numerico ::= ENTERO 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 System.out.println("Tipo: " + a); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*tipo_numerico*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= texto 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= tipo_numerico 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*tipo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_variable ::= tipo declarador_variable FINLINEA 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*declaracion_variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_variables ::= declaracion_variables declaracion_variable 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*declaracion_variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion_variables ::= declaracion_variable 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*declaracion_variables*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo_metodo ::= ABRELLAVE declaracion_variables bloque_argumentos CIERRALLAVE 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*cuerpo_metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion_metodo ::= FLOTANTE STRING ABREPAR CIERRAPAR cuerpo_metodo 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("NombreFlotante" + a); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*declaracion_metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion_metodo ::= LOGIC STRING ABREPAR CIERRAPAR cuerpo_metodo 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("NombreString" + a); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*declaracion_metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion_metodo ::= ENTERO STRING ABREPAR CIERRAPAR cuerpo_metodo 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("NombreEntero: " + a); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*declaracion_metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion_metodo ::= RUTINA STRING ABREPAR CIERRAPAR cuerpo_metodo 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("NombreRutina " + a); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*declaracion_metodo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_metodos ::= declaracion_metodo declaracion_metodos 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*declaracion_metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_metodos ::= declaracion_metodo 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*declaracion_metodos*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_clase ::= ABRELLAVE declaracion_metodos CIERRALLAVE 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*cuerpo_clase*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracion_clase ::= CLASE STRING cuerpo_clase 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("NombreClase: " + a); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*declaracion_clase*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= declaracion_clase 
            {
              String RESULT = null;
		 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*programa*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

