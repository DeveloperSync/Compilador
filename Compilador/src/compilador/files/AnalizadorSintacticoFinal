/* calculadora.cup */
/* http://www.academia.edu/4927379/JLex_y_Java_Cup_Instalacion_y_Ejemplo_2 */

/* Importamos las clases necesarias del paquete cup.jar */
import java_cup.runtime.*;

/**
    * Aquí ponemos el código que se usará para comenzar a parsear la entrada.
*/
parser code {:
        public static void main(String args[]) throws Exception {
            // La clase Yylex es creada por el analizador léxico
            // Jlex (ver sección siguiente).
            new parser(new Yylex(System.in)).parse();
        }
:}

/* Aquí especificamos los terminales del lenguaje. */
terminal MAS, MENOS, POR, DIV, PARI, PARD, FIN;
/**
    * Este terminal tiene un valor entero. Recuerda que le dábamos el valor
    * en el código del analizador léxico, al darle como parámetro un valor
    * entero al objeto Symbol.
*/
terminal Integer NUMERO;
terminal String String;

/* Lista de no terminales. */
non terminal expr_list, expr_part;
/**
    * Aquí están los no terminales con valor entero, que son con los que
    * podemos hacer cálculos, y podemos escribirlos de la forma expr_e:l
    * (por ejemplo, no se podría hacer expr_list:l, ya que a ese no
    * terminal no le damos valor.
    */
non terminal String programa;
non terminal String declaracion_clase;
non terminal String cuerpo_clase;
non terminal String declaracion_metodo;
non terminal String cuerpo_metodo;
non terminal String declaracion_variables
non terminal String declaracion_variable;
non terminal String tipo;
non terminal String texto;
non terminal String declarador_variable;
non terminal String cuerpo_metodo;
non terminal String cuerpo_metodo;
non terminal String cuerpo_metodo;
non terminal String cuerpo_metodo;
non terminal String tipo;
non terminal String texto;
non terminal String declaracion_numero;
non terminal String declaracion_entero;
non terminal String declaracion_flotante;
non terminal String declaracion_texto;
non terminal String bloque_argumentos;
non terminal String argumentos;
non terminal String argumento;
non terminal String expresion;


/* Aquí especificamos la precedencia de los operadores. */
precedence left MAS;
precedence left MENOS;
precedence left POR;
precedence left DIV;

/**
    * Ahora comenzamos con las reglas de producción.
    */

/**
    * Estas dos reglas son nuevas. Nos sirven para encadenar varias
    * expresiones separadas por un ';'
    */

programa: declaracion_clase
declaracion_clase: CLASE STRING cuerpo_clase
cuerpo_clase: ABRELLAVE declaracion_metodo CIERRALLAVE
declaracion_metodo: RUTINA STRING ABREPAR CIERRAPAR cuerpo_metodo
declaracion_metodo: ENTERO STRING ABREPAR CIERRAPAR cuerpo_metodo
declaracion_metodo: LOGIC STRING ABREPAR CIERRAPAR cuerpo_metodo
declaracion_metodo: FLOTANTE STRING ABREPAR CIERRAPAR cuerpo_metodo
cuerpo_metodo: ABRELLAVE declaracion_variables bloque_argumentos CIERRALLAVE
declaracion_variables: declaracion_variables | declaracion_variables declaracion_variable
declaracion_variable: tipo declararador_variable 
tipo: tipo_numerico
tipo: texto
tipo_numerico: ENTERO | FLOTANTE
texto: TEXTO
declarador_variable: declaracion_numero | declaracion_texto
declaracion_numero: declaracion_entero | declaracion_flotante
declaracion_entero: STRING IGUAL NUMERO
declaracion_flotante: STRING IGUAL NUMERO PUNTO NUMERO
declaracion_texto: STRING IGUAL TEXTDEC STRING TEXTDEC
bloque_argumentos: argumentos | bloque_argumentos argumentos
argumentos: argumento FINLINEA
argumento: expresion
expresion: NUMERO | STRING | declarador_variable | expresion MAS expresion | expresion MENOS  expresion | expresion POR expresion | expresion DIV expresion | (expresion)
